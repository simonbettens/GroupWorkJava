package gui;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Optional;

import controllers.SessieController;
import domein.Sessie;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;

import javafx.scene.control.TextArea;

import javafx.scene.control.CheckBox;

import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.ChoiceBox;

public class SessieDetailsController extends VBox
		implements PropertyChangeListener, DeelScherm<SessieKalenderDeelScherm> {
	@FXML
	private DatePicker dtStart;
	@FXML
	private DatePicker dtEind;
	@FXML
	private TextField txfNaam;
	@FXML
	private TextField txfGastspreker;
	@FXML
	private TextField txfLokaal;
	@FXML
	private ChoiceBox<String> cbVerantwoordelijke;
	@FXML
	private TextField txfStartuur;
	@FXML
	private TextField txfStartmin;
	@FXML
	private TextField txfEinduur;
	@FXML
	private TextField txfEindmin;
	@FXML
	private TextField txfCap;
	@FXML
	private TextArea txaBeschrijving;
	@FXML
	private CheckBox chbStaatOpen;
	@FXML
	private CheckBox chbGesloten;
	@FXML
	private HBox hBtns;
	@FXML
	private Button btnMedia;
	@FXML
	private Button btnInschrijvingen;
	@FXML
	private Button btnFeedback;
	@FXML
	private Button btnAankondigingen;
	@FXML
	private Button btnVerwijder;
	@FXML
	private Button btnOpslaan;
	@FXML
	private Button btnAnnuleer;
	@FXML
	private Label lblError;
	private boolean isEdit;
	private SessieController sc;
	private SessieKalenderDeelScherm parent;

	public SessieDetailsController() {
		isEdit = false;
	}

	@Override
	public void buildGui(SessieKalenderDeelScherm parent) {
		// TODO Auto-generated method stub
		this.parent = parent;
		this.sc = parent.getSessieController();
		sc.addPropertyChangeListenerSessie(this, "geselecteerdeSessie");
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/SessieDetails.fxml"));
		loader.setController(this);
		loader.setRoot(this);

		try {
			loader.load();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		if (!isEdit) {
			btnOpslaan.setText("Maak sessie");
			hBtns.setDisable(true);
			btnVerwijder.setDisable(true);
			chbGesloten.setDisable(true);
			chbStaatOpen.setDisable(true);
		}
		lblError.setText("");
		txaBeschrijving.setWrapText(true);
		sc.setVerantwoordelijkeLijstBijSessie(sc.getIngelogdeGebruiker());
		cbVerantwoordelijke.setItems(sc.getVerantwoordelijkeNamen());
	}

	public void setEdit(boolean isEdit) {
		this.isEdit = isEdit;
	}

	// Event Listener on Button[#btnMedia].onAction
	@FXML
	public void loadMedia(ActionEvent event) {
		// TODO Autogenerated
		parent.changeGui(9, 10);
	}

	// Event Listener on Button[#btnInschrijvingen].onAction
	@FXML
	public void loadInschrijvingen(ActionEvent event) {
		// TODO Autogenerated
		parent.changeGui(13, 14);
	}

	// Event Listener on Button[#btnFeedback].onAction
	@FXML
	public void loadFeedback(ActionEvent event) {
		// TODO Autogenerated
		parent.changeGui(15, 16);
	}

	// Event Listener on Button[#btnAankondigingen].onAction
	@FXML
	public void loadAankondigingen(ActionEvent event) {
		// TODO Autogenerated
		parent.changeGui(11, 12);
	}

	// Event Listener on Button[#btnVerwijder].onAction
	@FXML
	public void verwijderSessie(ActionEvent event) {
		// TODO Autogenerated
		Alert alert = new Alert(AlertType.CONFIRMATION);
		alert.setTitle("Sessie verwijderen");
		alert.setHeaderText("Bevestig");
		alert.setContentText("Wens je zeker deze sessie te verwijderen?");
		Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
		Optional<ButtonType> antwoord = alert.showAndWait();
		if (antwoord.get() == ButtonType.OK) {
			System.out.println("Gebruiker is verwijderd");
			sc.deleteSessie();
			bewerkSessie();
			event.consume();
		} else {
			bewerkSessie();
			event.consume();
		}

	}

	// Event Listener on Button[#btnOpslaan].onAction
	@FXML
	public void opslaan(ActionEvent event) {
		// TODO Autogenerated
		String titel, lokaal, gastSpreker, startuur, startmin, einduur, eindmin, volledigeNaamVerantwoordelijke,
				beschrijving, maxCap = "";
		boolean staatOpen, gesloten;
		LocalDate start, einde;
		titel = txfNaam.getText();
		lokaal = txfLokaal.getText();
		gastSpreker = txfGastspreker.getText();
		maxCap = txfCap.getText();
		startuur = txfStartuur.getText();
		startmin = txfStartmin.getText();
		einduur = txfEinduur.getText();
		eindmin = txfEindmin.getText();
		volledigeNaamVerantwoordelijke = cbVerantwoordelijke.getSelectionModel().getSelectedItem();
		beschrijving = txaBeschrijving.getText();
		start = dtStart.getValue();
		einde = dtEind.getValue();
		staatOpen = chbStaatOpen.isSelected();
		gesloten = chbGesloten.isSelected();
		try {
			if (this.isEdit) {
				sc.pasSessieAan(titel, lokaal, gastSpreker, startuur, startmin, einduur, eindmin,
						volledigeNaamVerantwoordelijke, beschrijving, maxCap, staatOpen, gesloten, start, einde);
				lblError.setText("");
			} else {
				sc.maakSessieAan(titel, lokaal, gastSpreker, startuur, startmin, einduur, eindmin,
						volledigeNaamVerantwoordelijke, beschrijving, maxCap, start, einde);
				bewerkSessie();
				lblError.setText("");
			}

		} catch (NumberFormatException e) {
			lblError.setText(e.getMessage());
			System.out.println(e.getMessage());
		} catch (IllegalArgumentException e) {
			lblError.setText(e.getMessage());
			System.out.println(e.getMessage());
		}finally {
			Sessie gSessie = sc.getSessie();
			chbStaatOpen.setSelected(gSessie.isStaatOpen());
			chbStaatOpen.setDisable(false);
			if (gSessie.isBezig() || gSessie.isStaatOpen()) {
				System.out.println(gSessie.isBezig() + " " + gSessie.isStaatOpen());
				chbGesloten.setDisable(true);
			} else {
				chbGesloten.setDisable(false);
				gesloten = gSessie.isGesloten();
				chbGesloten.setSelected(gesloten);
				if(gesloten) {
					System.out.println(gesloten);
					chbStaatOpen.setDisable(true);
				}
			}
		}
	}

	// Event Listener on Button[#btnAnnuleer].onAction
	@FXML
	public void annuleer(ActionEvent event) {
		// TODO Autogenerated
		if (isEdit) {
			Sessie gSessie = sc.getSessie();
			if (gSessie != null) {
				dtStart.setValue(gSessie.getStartDatum().toLocalDate());
				dtEind.setValue(gSessie.getEindDatum().toLocalDate());
				txfNaam.setText(gSessie.getNaam());
				txfLokaal.setText(gSessie.getLokaal());
				txfGastspreker.setText(gSessie.getGastspreker());
				txfCap.setText(String.format("%d", gSessie.getMaxCap()));
				cbVerantwoordelijke.setItems(sc.getVerantwoordelijkeNamen());
				cbVerantwoordelijke.getSelectionModel().select(gSessie.getVerantwoordelijke().getVolledigeNaam());
				txfStartuur.setText(String.format("%d", gSessie.getStartDatum().getHour()));
				txfStartmin.setText(String.format("%d", gSessie.getStartDatum().getMinute()));
				txfEinduur.setText(String.format("%d", gSessie.getEindDatum().getHour()));
				txfEindmin.setText(String.format("%d", gSessie.getEindDatum().getMinute()));
				txaBeschrijving.setText(gSessie.getBeschrijving());
				chbStaatOpen.setSelected(gSessie.isStaatOpen());
				chbStaatOpen.setDisable(false);
				if (gSessie.isBezig() || gSessie.isStaatOpen()) {
					System.out.println(gSessie.isBezig() + " " + gSessie.isStaatOpen());
					chbGesloten.setDisable(true);
				} else {
					chbGesloten.setDisable(false);
					boolean gesloten = gSessie.isGesloten();
					chbGesloten.setSelected(gesloten);
					if(gesloten) {
						System.out.println(gesloten);
						chbStaatOpen.setDisable(true);
					}
				}
			}
		} else {
			bewerkSessie();
		}
	}

	public void bewerkSessie() {
		dtStart.setValue(LocalDate.now());
		dtEind.setValue(LocalDate.now());
		txfNaam.setText("");
		txfLokaal.setText("");
		txfGastspreker.setText("");
		txfCap.setText("");
		cbVerantwoordelijke.setItems(sc.getVerantwoordelijkeNamen());
		cbVerantwoordelijke.getSelectionModel().select("");
		txfStartuur.setText("");
		txfStartmin.setText("");
		txfEinduur.setText("");
		txfEindmin.setText("");
		txaBeschrijving.setText("");
		chbStaatOpen.setSelected(false);
		chbGesloten.setDisable(true);
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		// TODO Auto-generated method stub
		if (evt.getPropertyName().equals("sessie")) {
			Sessie gSessie = (Sessie) evt.getNewValue();
			lblError.setText("");
			if (gSessie != null) {
				if (!isEdit) {
					this.isEdit = true;
					btnOpslaan.setText("Wijzigingen opslaan");
					hBtns.setDisable(false);
					btnVerwijder.setDisable(false);
					chbGesloten.setDisable(false);
					chbStaatOpen.setDisable(false);
				}
				dtStart.setValue(gSessie.getStartDatum().toLocalDate());
				dtEind.setValue(gSessie.getEindDatum().toLocalDate());
				txfNaam.setText(gSessie.getNaam());
				txfLokaal.setText(gSessie.getLokaal());
				txfCap.setText(String.format("%d", gSessie.getMaxCap()));
				txfGastspreker.setText(gSessie.getGastspreker());
				cbVerantwoordelijke.setItems(sc.getVerantwoordelijkeNamen());
				cbVerantwoordelijke.getSelectionModel().select(gSessie.getVerantwoordelijke().getVolledigeNaam());
				txfStartuur.setText(String.format("%d", gSessie.getStartDatum().getHour()));
				txfStartmin.setText(String.format("%d", gSessie.getStartDatum().getMinute()));
				txfEinduur.setText(String.format("%d", gSessie.getEindDatum().getHour()));
				txfEindmin.setText(String.format("%d", gSessie.getEindDatum().getMinute()));
				txaBeschrijving.setText(gSessie.getBeschrijving());
				chbStaatOpen.setSelected(gSessie.isStaatOpen());
				chbStaatOpen.setDisable(false);
				if (gSessie.isBezig() || gSessie.isStaatOpen()) {
					System.out.println(gSessie.isBezig() + " " + gSessie.isStaatOpen());
					chbGesloten.setDisable(true);
				} else {
					chbGesloten.setDisable(false);
					boolean gesloten = gSessie.isGesloten();
					chbGesloten.setSelected(gesloten);
					if(gesloten) {
						System.out.println(gesloten);
						chbStaatOpen.setDisable(true);
					}
				}
			}
		}
	}

}
