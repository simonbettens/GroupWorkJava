package gui;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;

import javafx.scene.layout.VBox;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import controllers.AankondigingController;
import controllers.SessieController;
import domein.AankondigingPrioriteit;
import domein.Media;
import domein.MediaType;
import domein.Sessie;
import domein.SessieAankondiging;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.TextArea;

import javafx.scene.control.ComboBox;

public class SessieAankondigingDetailsController extends VBox
		implements DeelScherm<SessieKalenderDeelScherm>, PropertyChangeListener {
	@FXML
	private Label lblNaam;
	@FXML
	private Label lblError;
	@FXML
	private TextArea txtInhoud;
	@FXML
	private ComboBox<String> cbPrioriteit;
	@FXML
	private Button btnVerwijder;
	@FXML
	private Button btnOpslaan;
	@FXML
	private Button btnAnnuleer;
	private SessieController sc;
	private AankondigingController ac;

	private SessieKalenderDeelScherm parent;
	private boolean isEdit;

	@Override
	public void buildGui(SessieKalenderDeelScherm parent) {
		// TODO Auto-generated method stub
		this.parent = parent;
		this.sc = parent.getSessieController();
		this.ac = parent.getAankondigingController();
		ac.addPropertyChangeListenerSessie(this, "sessieAankondiging");
		isEdit = false;
		Sessie sessie = ac.getGekozenSessie();
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/SessieAankondigingDetails.fxml"));
		loader.setController(this);
		loader.setRoot(this);
		try {
			loader.load();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		lblError.setText("");
		List<String> sessieAankondigingLijst = Arrays.asList(AankondigingPrioriteit.values()).stream().sorted()
				.map(ap -> AankondigingPrioriteit.AankondigingPrioriteitToString(ap)).collect(Collectors.toList());
		cbPrioriteit.setItems(FXCollections.observableArrayList(sessieAankondigingLijst));
		btnOpslaan.setText("Maak nieuwe aankondiging");
		btnVerwijder.setDisable(true);
		lblNaam.setText(sessie.getNaam());
	}

	// Event Listener on Button[#btnVerwijder].onAction
	@FXML
	public void verwijder(ActionEvent event) {
		// TODO Autogenerated
		ac.deleteSessieAankondiging();
	}

	// Event Listener on Button[#btnOpslaan].onAction
	@FXML
	public void opslaan(ActionEvent event) {
		// TODO Autogenerated
		String inhoud = txtInhoud.getText();
		AankondigingPrioriteit prioriteit = AankondigingPrioriteit
				.StringToAankondigingPrioriteit(cbPrioriteit.getSelectionModel().getSelectedItem());
		Sessie sessie = ac.getGekozenSessie();

		try {
			if (!sessie.isGesloten()) {
				if (isEdit) {
					ac.pasSessieAankondigingAan(inhoud, prioriteit);
				} else {
					ac.maakSessieAankondiging(inhoud, prioriteit);
				}
				lblError.setText("");
			} else {
				annuleer(event);
				if (isEdit) {
					throw new IllegalArgumentException("Sessie is gesloten kan sessie niet aanpassen");
				} else {
					throw new IllegalArgumentException("Sessie is gesloten kan sessie niet toevoegen");
				}
			}
		} catch (IllegalArgumentException e) {
			lblError.setText(e.getMessage());
		}

	}

	// Event Listener on Button[#btnAnnuleer].onAction
	@FXML
	public void annuleer(ActionEvent event) {
		// TODO Autogenerated
		if (isEdit) {
			SessieAankondiging sa = ac.getGekozenSessieAankondiging();
			if (ac != null) {
				txtInhoud.setText(sa.getInhoud());
				cbPrioriteit.getSelectionModel()
						.select(AankondigingPrioriteit.AankondigingPrioriteitToString(sa.getPrioriteit()));
			} else {
				txtInhoud.setText("");
				cbPrioriteit.getSelectionModel().select("");
			}
		} else {
			txtInhoud.setText("");
			cbPrioriteit.getSelectionModel().select("");
		}
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		// TODO Auto-generated method stub
		if (evt.getPropertyName().equals("sessieAankondiging")) {
			if (evt.getNewValue() != null) {
				btnOpslaan.setText("Wijzigingen opslaan");
				btnVerwijder.setDisable(false);
				isEdit = true;
				SessieAankondiging sa = (SessieAankondiging) evt.getNewValue();
				txtInhoud.setText(sa.getInhoud());
				cbPrioriteit.getSelectionModel()
						.select(AankondigingPrioriteit.AankondigingPrioriteitToString(sa.getPrioriteit()));
			}
		}
	}

}
